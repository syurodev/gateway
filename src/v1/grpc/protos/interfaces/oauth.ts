// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.28.3
// source: src/v1/grpc/protos/oauth.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "com.zen.grpc.nodejs.oauth.service";

export interface Empty {
}

export interface BaseResponse {
  status: number;
  message: string;
  data: Empty | undefined;
}

/** >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> REGISTER <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
export interface RegisterDTO {
  email: string;
  username: string;
  password: string;
}

/** >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> LOGIN <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
export interface LoginDTO {
  username: string;
  password: string;
  device_info: DeviceInfo | undefined;
}

/** Thông tin vị trí */
export interface Location {
  /** Địa chỉ IP */
  ip: string;
  /** Thành phố */
  city: string;
  /** Vùng miền */
  region: string;
  /** Quốc gia (Mã quốc gia) */
  country: string;
  /** Tọa độ (latitude, longitude) */
  location: string;
  /** Mã bưu chính */
  postal: string;
  /** Múi giờ */
  timezone: string;
}

/** Thông tin thiết bị */
export interface DeviceInfo {
  /** Hệ điều hành */
  os: string;
  /** Tên trình duyệt */
  browser: string;
  /** Phiên bản trình duyệt */
  browser_version: string;
  /** Loại thiết bị */
  device_type: string;
  /** Thông tin vị trí */
  location: Location | undefined;
}

export interface Tokens {
  access_token: string;
  refresh_token: string;
}

export interface LoginResponseData {
  id: number;
  username: string;
  email: string;
  first_name: string;
  last_name: string;
  avatar: string;
  roles: string[];
  privileges: string[];
  tokens: Tokens | undefined;
}

export interface LoginResponse {
  status: number;
  message: string;
  data: LoginResponseData | undefined;
}

/** >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> LOGOUT <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
export interface LogoutDTO {
  user_id: number;
  access_token: string;
}

/** >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> VALIDATE_TOKEN <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
export interface ValidateTokenDTO {
  token: string;
}

export const COM_ZEN_GRPC_NODEJS_OAUTH_SERVICE_PACKAGE_NAME = "com.zen.grpc.nodejs.oauth.service";

export interface OauthServiceClient {
  register(request: RegisterDTO, metadata?: Metadata): Observable<BaseResponse>;

  login(request: LoginDTO, metadata?: Metadata): Observable<LoginResponse>;

  logout(request: LogoutDTO, metadata?: Metadata): Observable<BaseResponse>;

  /** TOKEN */

  validateToken(request: ValidateTokenDTO, metadata?: Metadata): Observable<LoginResponse>;

  refreshToken(request: ValidateTokenDTO, metadata?: Metadata): Observable<LoginResponse>;
}

export interface OauthServiceController {
  register(request: RegisterDTO, metadata?: Metadata): Promise<BaseResponse> | Observable<BaseResponse> | BaseResponse;

  login(request: LoginDTO, metadata?: Metadata): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  logout(request: LogoutDTO, metadata?: Metadata): Promise<BaseResponse> | Observable<BaseResponse> | BaseResponse;

  /** TOKEN */

  validateToken(
    request: ValidateTokenDTO,
    metadata?: Metadata,
  ): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  refreshToken(
    request: ValidateTokenDTO,
    metadata?: Metadata,
  ): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;
}

export function OauthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["register", "login", "logout", "validateToken", "refreshToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OauthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OauthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const OAUTH_SERVICE_NAME = "OauthService";
