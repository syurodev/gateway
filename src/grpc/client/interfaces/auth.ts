// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: src/grpc/server/protos/auth.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'com.base.grpc.nodejs.user.auth';

export interface ValidateTokenDTO {
  token: string;
}

export interface Empty {}

export interface ValidateTokenResponse {
  status: number;
  message: string;
  message_code: string;
  data: UserAuth | undefined;
}

export interface UserAuth {
  user: User | undefined;
  access_token: string;
}

export interface User {
  id: number;
  username: string;
  email: string;
  roles: Role[];
  permissions: Permission[];
}

export interface Role {
  id: number;
  name: string;
}

export interface Permission {
  id: number;
  name: string;
  action: string;
  module: string;
}

export const COM_BASE_GRPC_NODEJS_USER_AUTH_PACKAGE_NAME =
  'com.base.grpc.nodejs.user.auth';

export interface AuthServiceClient {
  validateToken(
    request: ValidateTokenDTO,
    metadata?: Metadata,
  ): Observable<ValidateTokenResponse>;
}

export interface AuthServiceController {
  validateToken(
    request: ValidateTokenDTO,
    metadata?: Metadata,
  ):
    | Promise<ValidateTokenResponse>
    | Observable<ValidateTokenResponse>
    | ValidateTokenResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['validateToken'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const AUTH_SERVICE_NAME = 'AuthService';
